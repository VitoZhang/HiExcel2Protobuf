// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlantSpec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TableTool {

  /// <summary>Holder for reflection information generated from PlantSpec.proto</summary>
  public static partial class PlantSpecReflection {

    #region Descriptor
    /// <summary>File descriptor for PlantSpec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlantSpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9QbGFudFNwZWMucHJvdG8iwwIKCVBsYW50U3BlYxIKCgJpZBgBIAEoAxIM",
            "CgRuYW1lGAIgASgJEhIKCmNlbGxDb3VudFgYAyABKAUSEgoKY2VsbENvdW50",
            "WRgEIAEoBRINCgVtb2RlbBgFIAEoCRIMCgRpY29uGAYgASgJEhAKCGJ1dFBy",
            "aWNlGAcgASgFEhEKCXNlbGxQcmljZRgIIAEoBRITCgtidWlsZFN0YWdlcxgJ",
            "IAMoBRIZChFidWlsZFN0YWdlc01vZGVscxgKIAMoCRIVCg1wcm9kdWNlU3Rh",
            "Z2VzGAsgAygFEhsKE3Byb2R1Y2VTdGFnZXNNb2RlbHMYDCADKAkSEAoIcHJv",
            "ZHVjdHMYDSADKAUSEQoJcHJvZHVjdElkGA4gASgFEhQKDHByb2R1Y2VMb29w",
            "cxgPIAEoBRITCgtuZWVkUmVidWlsZBgQIAEoCCJyCg5QbGFudFNwZWNUYWJs",
            "ZRInCgREYXRhGAEgAygLMhkuUGxhbnRTcGVjVGFibGUuRGF0YUVudHJ5GjcK",
            "CURhdGFFbnRyeRILCgNrZXkYASABKAMSGQoFdmFsdWUYAiABKAsyCi5QbGFu",
            "dFNwZWM6AjgBQgyqAglUYWJsZVRvb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TableTool.PlantSpec), global::TableTool.PlantSpec.Parser, new[]{ "Id", "Name", "CellCountX", "CellCountY", "Model", "Icon", "ButPrice", "SellPrice", "BuildStages", "BuildStagesModels", "ProduceStages", "ProduceStagesModels", "Products", "ProductId", "ProduceLoops", "NeedRebuild" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TableTool.PlantSpecTable), global::TableTool.PlantSpecTable.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlantSpec : pb::IMessage<PlantSpec> {
    private static readonly pb::MessageParser<PlantSpec> _parser = new pb::MessageParser<PlantSpec>(() => new PlantSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TableTool.PlantSpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSpec(PlantSpec other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      cellCountX_ = other.cellCountX_;
      cellCountY_ = other.cellCountY_;
      model_ = other.model_;
      icon_ = other.icon_;
      butPrice_ = other.butPrice_;
      sellPrice_ = other.sellPrice_;
      buildStages_ = other.buildStages_.Clone();
      buildStagesModels_ = other.buildStagesModels_.Clone();
      produceStages_ = other.produceStages_.Clone();
      produceStagesModels_ = other.produceStagesModels_.Clone();
      products_ = other.products_.Clone();
      productId_ = other.productId_;
      produceLoops_ = other.produceLoops_;
      needRebuild_ = other.needRebuild_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSpec Clone() {
      return new PlantSpec(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cellCountX" field.</summary>
    public const int CellCountXFieldNumber = 3;
    private int cellCountX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellCountX {
      get { return cellCountX_; }
      set {
        cellCountX_ = value;
      }
    }

    /// <summary>Field number for the "cellCountY" field.</summary>
    public const int CellCountYFieldNumber = 4;
    private int cellCountY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellCountY {
      get { return cellCountY_; }
      set {
        cellCountY_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 5;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "butPrice" field.</summary>
    public const int ButPriceFieldNumber = 7;
    private int butPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ButPrice {
      get { return butPrice_; }
      set {
        butPrice_ = value;
      }
    }

    /// <summary>Field number for the "sellPrice" field.</summary>
    public const int SellPriceFieldNumber = 8;
    private int sellPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellPrice {
      get { return sellPrice_; }
      set {
        sellPrice_ = value;
      }
    }

    /// <summary>Field number for the "buildStages" field.</summary>
    public const int BuildStagesFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_buildStages_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> buildStages_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuildStages {
      get { return buildStages_; }
    }

    /// <summary>Field number for the "buildStagesModels" field.</summary>
    public const int BuildStagesModelsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_buildStagesModels_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> buildStagesModels_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BuildStagesModels {
      get { return buildStagesModels_; }
    }

    /// <summary>Field number for the "produceStages" field.</summary>
    public const int ProduceStagesFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_produceStages_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> produceStages_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ProduceStages {
      get { return produceStages_; }
    }

    /// <summary>Field number for the "produceStagesModels" field.</summary>
    public const int ProduceStagesModelsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_produceStagesModels_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> produceStagesModels_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ProduceStagesModels {
      get { return produceStagesModels_; }
    }

    /// <summary>Field number for the "products" field.</summary>
    public const int ProductsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_products_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> products_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Products {
      get { return products_; }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 14;
    private int productId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProductId {
      get { return productId_; }
      set {
        productId_ = value;
      }
    }

    /// <summary>Field number for the "produceLoops" field.</summary>
    public const int ProduceLoopsFieldNumber = 15;
    private int produceLoops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProduceLoops {
      get { return produceLoops_; }
      set {
        produceLoops_ = value;
      }
    }

    /// <summary>Field number for the "needRebuild" field.</summary>
    public const int NeedRebuildFieldNumber = 16;
    private bool needRebuild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedRebuild {
      get { return needRebuild_; }
      set {
        needRebuild_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CellCountX != other.CellCountX) return false;
      if (CellCountY != other.CellCountY) return false;
      if (Model != other.Model) return false;
      if (Icon != other.Icon) return false;
      if (ButPrice != other.ButPrice) return false;
      if (SellPrice != other.SellPrice) return false;
      if(!buildStages_.Equals(other.buildStages_)) return false;
      if(!buildStagesModels_.Equals(other.buildStagesModels_)) return false;
      if(!produceStages_.Equals(other.produceStages_)) return false;
      if(!produceStagesModels_.Equals(other.produceStagesModels_)) return false;
      if(!products_.Equals(other.products_)) return false;
      if (ProductId != other.ProductId) return false;
      if (ProduceLoops != other.ProduceLoops) return false;
      if (NeedRebuild != other.NeedRebuild) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CellCountX != 0) hash ^= CellCountX.GetHashCode();
      if (CellCountY != 0) hash ^= CellCountY.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (ButPrice != 0) hash ^= ButPrice.GetHashCode();
      if (SellPrice != 0) hash ^= SellPrice.GetHashCode();
      hash ^= buildStages_.GetHashCode();
      hash ^= buildStagesModels_.GetHashCode();
      hash ^= produceStages_.GetHashCode();
      hash ^= produceStagesModels_.GetHashCode();
      hash ^= products_.GetHashCode();
      if (ProductId != 0) hash ^= ProductId.GetHashCode();
      if (ProduceLoops != 0) hash ^= ProduceLoops.GetHashCode();
      if (NeedRebuild != false) hash ^= NeedRebuild.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CellCountX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CellCountX);
      }
      if (CellCountY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CellCountY);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Model);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (ButPrice != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ButPrice);
      }
      if (SellPrice != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SellPrice);
      }
      buildStages_.WriteTo(output, _repeated_buildStages_codec);
      buildStagesModels_.WriteTo(output, _repeated_buildStagesModels_codec);
      produceStages_.WriteTo(output, _repeated_produceStages_codec);
      produceStagesModels_.WriteTo(output, _repeated_produceStagesModels_codec);
      products_.WriteTo(output, _repeated_products_codec);
      if (ProductId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ProductId);
      }
      if (ProduceLoops != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ProduceLoops);
      }
      if (NeedRebuild != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(NeedRebuild);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CellCountX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellCountX);
      }
      if (CellCountY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellCountY);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (ButPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ButPrice);
      }
      if (SellPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellPrice);
      }
      size += buildStages_.CalculateSize(_repeated_buildStages_codec);
      size += buildStagesModels_.CalculateSize(_repeated_buildStagesModels_codec);
      size += produceStages_.CalculateSize(_repeated_produceStages_codec);
      size += produceStagesModels_.CalculateSize(_repeated_produceStagesModels_codec);
      size += products_.CalculateSize(_repeated_products_codec);
      if (ProductId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProductId);
      }
      if (ProduceLoops != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProduceLoops);
      }
      if (NeedRebuild != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantSpec other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CellCountX != 0) {
        CellCountX = other.CellCountX;
      }
      if (other.CellCountY != 0) {
        CellCountY = other.CellCountY;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.ButPrice != 0) {
        ButPrice = other.ButPrice;
      }
      if (other.SellPrice != 0) {
        SellPrice = other.SellPrice;
      }
      buildStages_.Add(other.buildStages_);
      buildStagesModels_.Add(other.buildStagesModels_);
      produceStages_.Add(other.produceStages_);
      produceStagesModels_.Add(other.produceStagesModels_);
      products_.Add(other.products_);
      if (other.ProductId != 0) {
        ProductId = other.ProductId;
      }
      if (other.ProduceLoops != 0) {
        ProduceLoops = other.ProduceLoops;
      }
      if (other.NeedRebuild != false) {
        NeedRebuild = other.NeedRebuild;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CellCountX = input.ReadInt32();
            break;
          }
          case 32: {
            CellCountY = input.ReadInt32();
            break;
          }
          case 42: {
            Model = input.ReadString();
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
          case 56: {
            ButPrice = input.ReadInt32();
            break;
          }
          case 64: {
            SellPrice = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            buildStages_.AddEntriesFrom(input, _repeated_buildStages_codec);
            break;
          }
          case 82: {
            buildStagesModels_.AddEntriesFrom(input, _repeated_buildStagesModels_codec);
            break;
          }
          case 90:
          case 88: {
            produceStages_.AddEntriesFrom(input, _repeated_produceStages_codec);
            break;
          }
          case 98: {
            produceStagesModels_.AddEntriesFrom(input, _repeated_produceStagesModels_codec);
            break;
          }
          case 106:
          case 104: {
            products_.AddEntriesFrom(input, _repeated_products_codec);
            break;
          }
          case 112: {
            ProductId = input.ReadInt32();
            break;
          }
          case 120: {
            ProduceLoops = input.ReadInt32();
            break;
          }
          case 128: {
            NeedRebuild = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlantSpecTable : pb::IMessage<PlantSpecTable> {
    private static readonly pb::MessageParser<PlantSpecTable> _parser = new pb::MessageParser<PlantSpecTable>(() => new PlantSpecTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantSpecTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TableTool.PlantSpecReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSpecTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSpecTable(PlantSpecTable other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSpecTable Clone() {
      return new PlantSpecTable(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pbc::MapField<long, global::TableTool.PlantSpec>.Codec _map_data_codec
        = new pbc::MapField<long, global::TableTool.PlantSpec>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::TableTool.PlantSpec.Parser), 10);
    private readonly pbc::MapField<long, global::TableTool.PlantSpec> data_ = new pbc::MapField<long, global::TableTool.PlantSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::TableTool.PlantSpec> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantSpecTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantSpecTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Data.Equals(other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_map_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantSpecTable other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
