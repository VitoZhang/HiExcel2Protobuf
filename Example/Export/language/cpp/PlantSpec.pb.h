// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlantSpec.proto

#ifndef PROTOBUF_PlantSpec_2eproto__INCLUDED
#define PROTOBUF_PlantSpec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_PlantSpec_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPlantSpecImpl();
void InitDefaultsPlantSpec();
void InitDefaultsPlantSpecTable_DataEntry_DoNotUseImpl();
void InitDefaultsPlantSpecTable_DataEntry_DoNotUse();
void InitDefaultsPlantSpecTableImpl();
void InitDefaultsPlantSpecTable();
inline void InitDefaults() {
  InitDefaultsPlantSpec();
  InitDefaultsPlantSpecTable_DataEntry_DoNotUse();
  InitDefaultsPlantSpecTable();
}
}  // namespace protobuf_PlantSpec_2eproto
class PlantSpec;
class PlantSpecDefaultTypeInternal;
extern PlantSpecDefaultTypeInternal _PlantSpec_default_instance_;
class PlantSpecTable;
class PlantSpecTableDefaultTypeInternal;
extern PlantSpecTableDefaultTypeInternal _PlantSpecTable_default_instance_;
class PlantSpecTable_DataEntry_DoNotUse;
class PlantSpecTable_DataEntry_DoNotUseDefaultTypeInternal;
extern PlantSpecTable_DataEntry_DoNotUseDefaultTypeInternal _PlantSpecTable_DataEntry_DoNotUse_default_instance_;

// ===================================================================

class PlantSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlantSpec) */ {
 public:
  PlantSpec();
  virtual ~PlantSpec();

  PlantSpec(const PlantSpec& from);

  inline PlantSpec& operator=(const PlantSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlantSpec(PlantSpec&& from) noexcept
    : PlantSpec() {
    *this = ::std::move(from);
  }

  inline PlantSpec& operator=(PlantSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlantSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlantSpec* internal_default_instance() {
    return reinterpret_cast<const PlantSpec*>(
               &_PlantSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlantSpec* other);
  friend void swap(PlantSpec& a, PlantSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlantSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  PlantSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlantSpec& from);
  void MergeFrom(const PlantSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlantSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 buildStages = 9;
  int buildstages_size() const;
  void clear_buildstages();
  static const int kBuildStagesFieldNumber = 9;
  ::google::protobuf::int32 buildstages(int index) const;
  void set_buildstages(int index, ::google::protobuf::int32 value);
  void add_buildstages(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buildstages() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buildstages();

  // repeated string buildStagesModels = 10;
  int buildstagesmodels_size() const;
  void clear_buildstagesmodels();
  static const int kBuildStagesModelsFieldNumber = 10;
  const ::std::string& buildstagesmodels(int index) const;
  ::std::string* mutable_buildstagesmodels(int index);
  void set_buildstagesmodels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_buildstagesmodels(int index, ::std::string&& value);
  #endif
  void set_buildstagesmodels(int index, const char* value);
  void set_buildstagesmodels(int index, const char* value, size_t size);
  ::std::string* add_buildstagesmodels();
  void add_buildstagesmodels(const ::std::string& value);
  #if LANG_CXX11
  void add_buildstagesmodels(::std::string&& value);
  #endif
  void add_buildstagesmodels(const char* value);
  void add_buildstagesmodels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& buildstagesmodels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_buildstagesmodels();

  // repeated int32 produceStages = 11;
  int producestages_size() const;
  void clear_producestages();
  static const int kProduceStagesFieldNumber = 11;
  ::google::protobuf::int32 producestages(int index) const;
  void set_producestages(int index, ::google::protobuf::int32 value);
  void add_producestages(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      producestages() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_producestages();

  // repeated string produceStagesModels = 12;
  int producestagesmodels_size() const;
  void clear_producestagesmodels();
  static const int kProduceStagesModelsFieldNumber = 12;
  const ::std::string& producestagesmodels(int index) const;
  ::std::string* mutable_producestagesmodels(int index);
  void set_producestagesmodels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_producestagesmodels(int index, ::std::string&& value);
  #endif
  void set_producestagesmodels(int index, const char* value);
  void set_producestagesmodels(int index, const char* value, size_t size);
  ::std::string* add_producestagesmodels();
  void add_producestagesmodels(const ::std::string& value);
  #if LANG_CXX11
  void add_producestagesmodels(::std::string&& value);
  #endif
  void add_producestagesmodels(const char* value);
  void add_producestagesmodels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& producestagesmodels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_producestagesmodels();

  // repeated int32 products = 13;
  int products_size() const;
  void clear_products();
  static const int kProductsFieldNumber = 13;
  ::google::protobuf::int32 products(int index) const;
  void set_products(int index, ::google::protobuf::int32 value);
  void add_products(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      products() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_products();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string model = 5;
  void clear_model();
  static const int kModelFieldNumber = 5;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string icon = 6;
  void clear_icon();
  static const int kIconFieldNumber = 6;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 cellCountX = 3;
  void clear_cellcountx();
  static const int kCellCountXFieldNumber = 3;
  ::google::protobuf::int32 cellcountx() const;
  void set_cellcountx(::google::protobuf::int32 value);

  // int32 cellCountY = 4;
  void clear_cellcounty();
  static const int kCellCountYFieldNumber = 4;
  ::google::protobuf::int32 cellcounty() const;
  void set_cellcounty(::google::protobuf::int32 value);

  // int32 butPrice = 7;
  void clear_butprice();
  static const int kButPriceFieldNumber = 7;
  ::google::protobuf::int32 butprice() const;
  void set_butprice(::google::protobuf::int32 value);

  // int32 sellPrice = 8;
  void clear_sellprice();
  static const int kSellPriceFieldNumber = 8;
  ::google::protobuf::int32 sellprice() const;
  void set_sellprice(::google::protobuf::int32 value);

  // int32 productId = 14;
  void clear_productid();
  static const int kProductIdFieldNumber = 14;
  ::google::protobuf::int32 productid() const;
  void set_productid(::google::protobuf::int32 value);

  // int32 produceLoops = 15;
  void clear_produceloops();
  static const int kProduceLoopsFieldNumber = 15;
  ::google::protobuf::int32 produceloops() const;
  void set_produceloops(::google::protobuf::int32 value);

  // bool needRebuild = 16;
  void clear_needrebuild();
  static const int kNeedRebuildFieldNumber = 16;
  bool needrebuild() const;
  void set_needrebuild(bool value);

  // @@protoc_insertion_point(class_scope:PlantSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buildstages_;
  mutable int _buildstages_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> buildstagesmodels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > producestages_;
  mutable int _producestages_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> producestagesmodels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > products_;
  mutable int _products_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 cellcountx_;
  ::google::protobuf::int32 cellcounty_;
  ::google::protobuf::int32 butprice_;
  ::google::protobuf::int32 sellprice_;
  ::google::protobuf::int32 productid_;
  ::google::protobuf::int32 produceloops_;
  bool needrebuild_;
  mutable int _cached_size_;
  friend struct ::protobuf_PlantSpec_2eproto::TableStruct;
  friend void ::protobuf_PlantSpec_2eproto::InitDefaultsPlantSpecImpl();
};
// -------------------------------------------------------------------

class PlantSpecTable_DataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PlantSpecTable_DataEntry_DoNotUse, 
    ::google::protobuf::int64, ::PlantSpec,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PlantSpecTable_DataEntry_DoNotUse, 
    ::google::protobuf::int64, ::PlantSpec,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PlantSpecTable_DataEntry_DoNotUse();
  PlantSpecTable_DataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PlantSpecTable_DataEntry_DoNotUse& other);
  static const PlantSpecTable_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlantSpecTable_DataEntry_DoNotUse*>(&_PlantSpecTable_DataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PlantSpecTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlantSpecTable) */ {
 public:
  PlantSpecTable();
  virtual ~PlantSpecTable();

  PlantSpecTable(const PlantSpecTable& from);

  inline PlantSpecTable& operator=(const PlantSpecTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlantSpecTable(PlantSpecTable&& from) noexcept
    : PlantSpecTable() {
    *this = ::std::move(from);
  }

  inline PlantSpecTable& operator=(PlantSpecTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlantSpecTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlantSpecTable* internal_default_instance() {
    return reinterpret_cast<const PlantSpecTable*>(
               &_PlantSpecTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlantSpecTable* other);
  friend void swap(PlantSpecTable& a, PlantSpecTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlantSpecTable* New() const PROTOBUF_FINAL { return New(NULL); }

  PlantSpecTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlantSpecTable& from);
  void MergeFrom(const PlantSpecTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlantSpecTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int64, .PlantSpec> Data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >&
      data() const;
  ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:PlantSpecTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PlantSpecTable_DataEntry_DoNotUse,
      ::google::protobuf::int64, ::PlantSpec,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > data_;
  mutable int _cached_size_;
  friend struct ::protobuf_PlantSpec_2eproto::TableStruct;
  friend void ::protobuf_PlantSpec_2eproto::InitDefaultsPlantSpecTableImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlantSpec

// int64 id = 1;
inline void PlantSpec::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlantSpec::id() const {
  // @@protoc_insertion_point(field_get:PlantSpec.id)
  return id_;
}
inline void PlantSpec::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.id)
}

// string name = 2;
inline void PlantSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlantSpec::name() const {
  // @@protoc_insertion_point(field_get:PlantSpec.name)
  return name_.GetNoArena();
}
inline void PlantSpec::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlantSpec.name)
}
#if LANG_CXX11
inline void PlantSpec::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlantSpec.name)
}
#endif
inline void PlantSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlantSpec.name)
}
inline void PlantSpec::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlantSpec.name)
}
inline ::std::string* PlantSpec::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PlantSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlantSpec::release_name() {
  // @@protoc_insertion_point(field_release:PlantSpec.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlantSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlantSpec.name)
}

// int32 cellCountX = 3;
inline void PlantSpec::clear_cellcountx() {
  cellcountx_ = 0;
}
inline ::google::protobuf::int32 PlantSpec::cellcountx() const {
  // @@protoc_insertion_point(field_get:PlantSpec.cellCountX)
  return cellcountx_;
}
inline void PlantSpec::set_cellcountx(::google::protobuf::int32 value) {
  
  cellcountx_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.cellCountX)
}

// int32 cellCountY = 4;
inline void PlantSpec::clear_cellcounty() {
  cellcounty_ = 0;
}
inline ::google::protobuf::int32 PlantSpec::cellcounty() const {
  // @@protoc_insertion_point(field_get:PlantSpec.cellCountY)
  return cellcounty_;
}
inline void PlantSpec::set_cellcounty(::google::protobuf::int32 value) {
  
  cellcounty_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.cellCountY)
}

// string model = 5;
inline void PlantSpec::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlantSpec::model() const {
  // @@protoc_insertion_point(field_get:PlantSpec.model)
  return model_.GetNoArena();
}
inline void PlantSpec::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlantSpec.model)
}
#if LANG_CXX11
inline void PlantSpec::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlantSpec.model)
}
#endif
inline void PlantSpec::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlantSpec.model)
}
inline void PlantSpec::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlantSpec.model)
}
inline ::std::string* PlantSpec::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:PlantSpec.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlantSpec::release_model() {
  // @@protoc_insertion_point(field_release:PlantSpec.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlantSpec::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:PlantSpec.model)
}

// string icon = 6;
inline void PlantSpec::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlantSpec::icon() const {
  // @@protoc_insertion_point(field_get:PlantSpec.icon)
  return icon_.GetNoArena();
}
inline void PlantSpec::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlantSpec.icon)
}
#if LANG_CXX11
inline void PlantSpec::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlantSpec.icon)
}
#endif
inline void PlantSpec::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlantSpec.icon)
}
inline void PlantSpec::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlantSpec.icon)
}
inline ::std::string* PlantSpec::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:PlantSpec.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlantSpec::release_icon() {
  // @@protoc_insertion_point(field_release:PlantSpec.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlantSpec::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:PlantSpec.icon)
}

// int32 butPrice = 7;
inline void PlantSpec::clear_butprice() {
  butprice_ = 0;
}
inline ::google::protobuf::int32 PlantSpec::butprice() const {
  // @@protoc_insertion_point(field_get:PlantSpec.butPrice)
  return butprice_;
}
inline void PlantSpec::set_butprice(::google::protobuf::int32 value) {
  
  butprice_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.butPrice)
}

// int32 sellPrice = 8;
inline void PlantSpec::clear_sellprice() {
  sellprice_ = 0;
}
inline ::google::protobuf::int32 PlantSpec::sellprice() const {
  // @@protoc_insertion_point(field_get:PlantSpec.sellPrice)
  return sellprice_;
}
inline void PlantSpec::set_sellprice(::google::protobuf::int32 value) {
  
  sellprice_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.sellPrice)
}

// repeated int32 buildStages = 9;
inline int PlantSpec::buildstages_size() const {
  return buildstages_.size();
}
inline void PlantSpec::clear_buildstages() {
  buildstages_.Clear();
}
inline ::google::protobuf::int32 PlantSpec::buildstages(int index) const {
  // @@protoc_insertion_point(field_get:PlantSpec.buildStages)
  return buildstages_.Get(index);
}
inline void PlantSpec::set_buildstages(int index, ::google::protobuf::int32 value) {
  buildstages_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlantSpec.buildStages)
}
inline void PlantSpec::add_buildstages(::google::protobuf::int32 value) {
  buildstages_.Add(value);
  // @@protoc_insertion_point(field_add:PlantSpec.buildStages)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlantSpec::buildstages() const {
  // @@protoc_insertion_point(field_list:PlantSpec.buildStages)
  return buildstages_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlantSpec::mutable_buildstages() {
  // @@protoc_insertion_point(field_mutable_list:PlantSpec.buildStages)
  return &buildstages_;
}

// repeated string buildStagesModels = 10;
inline int PlantSpec::buildstagesmodels_size() const {
  return buildstagesmodels_.size();
}
inline void PlantSpec::clear_buildstagesmodels() {
  buildstagesmodels_.Clear();
}
inline const ::std::string& PlantSpec::buildstagesmodels(int index) const {
  // @@protoc_insertion_point(field_get:PlantSpec.buildStagesModels)
  return buildstagesmodels_.Get(index);
}
inline ::std::string* PlantSpec::mutable_buildstagesmodels(int index) {
  // @@protoc_insertion_point(field_mutable:PlantSpec.buildStagesModels)
  return buildstagesmodels_.Mutable(index);
}
inline void PlantSpec::set_buildstagesmodels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PlantSpec.buildStagesModels)
  buildstagesmodels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PlantSpec::set_buildstagesmodels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:PlantSpec.buildStagesModels)
  buildstagesmodels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PlantSpec::set_buildstagesmodels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  buildstagesmodels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PlantSpec.buildStagesModels)
}
inline void PlantSpec::set_buildstagesmodels(int index, const char* value, size_t size) {
  buildstagesmodels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlantSpec.buildStagesModels)
}
inline ::std::string* PlantSpec::add_buildstagesmodels() {
  // @@protoc_insertion_point(field_add_mutable:PlantSpec.buildStagesModels)
  return buildstagesmodels_.Add();
}
inline void PlantSpec::add_buildstagesmodels(const ::std::string& value) {
  buildstagesmodels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PlantSpec.buildStagesModels)
}
#if LANG_CXX11
inline void PlantSpec::add_buildstagesmodels(::std::string&& value) {
  buildstagesmodels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PlantSpec.buildStagesModels)
}
#endif
inline void PlantSpec::add_buildstagesmodels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  buildstagesmodels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PlantSpec.buildStagesModels)
}
inline void PlantSpec::add_buildstagesmodels(const char* value, size_t size) {
  buildstagesmodels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PlantSpec.buildStagesModels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlantSpec::buildstagesmodels() const {
  // @@protoc_insertion_point(field_list:PlantSpec.buildStagesModels)
  return buildstagesmodels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlantSpec::mutable_buildstagesmodels() {
  // @@protoc_insertion_point(field_mutable_list:PlantSpec.buildStagesModels)
  return &buildstagesmodels_;
}

// repeated int32 produceStages = 11;
inline int PlantSpec::producestages_size() const {
  return producestages_.size();
}
inline void PlantSpec::clear_producestages() {
  producestages_.Clear();
}
inline ::google::protobuf::int32 PlantSpec::producestages(int index) const {
  // @@protoc_insertion_point(field_get:PlantSpec.produceStages)
  return producestages_.Get(index);
}
inline void PlantSpec::set_producestages(int index, ::google::protobuf::int32 value) {
  producestages_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlantSpec.produceStages)
}
inline void PlantSpec::add_producestages(::google::protobuf::int32 value) {
  producestages_.Add(value);
  // @@protoc_insertion_point(field_add:PlantSpec.produceStages)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlantSpec::producestages() const {
  // @@protoc_insertion_point(field_list:PlantSpec.produceStages)
  return producestages_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlantSpec::mutable_producestages() {
  // @@protoc_insertion_point(field_mutable_list:PlantSpec.produceStages)
  return &producestages_;
}

// repeated string produceStagesModels = 12;
inline int PlantSpec::producestagesmodels_size() const {
  return producestagesmodels_.size();
}
inline void PlantSpec::clear_producestagesmodels() {
  producestagesmodels_.Clear();
}
inline const ::std::string& PlantSpec::producestagesmodels(int index) const {
  // @@protoc_insertion_point(field_get:PlantSpec.produceStagesModels)
  return producestagesmodels_.Get(index);
}
inline ::std::string* PlantSpec::mutable_producestagesmodels(int index) {
  // @@protoc_insertion_point(field_mutable:PlantSpec.produceStagesModels)
  return producestagesmodels_.Mutable(index);
}
inline void PlantSpec::set_producestagesmodels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PlantSpec.produceStagesModels)
  producestagesmodels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PlantSpec::set_producestagesmodels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:PlantSpec.produceStagesModels)
  producestagesmodels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PlantSpec::set_producestagesmodels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  producestagesmodels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PlantSpec.produceStagesModels)
}
inline void PlantSpec::set_producestagesmodels(int index, const char* value, size_t size) {
  producestagesmodels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlantSpec.produceStagesModels)
}
inline ::std::string* PlantSpec::add_producestagesmodels() {
  // @@protoc_insertion_point(field_add_mutable:PlantSpec.produceStagesModels)
  return producestagesmodels_.Add();
}
inline void PlantSpec::add_producestagesmodels(const ::std::string& value) {
  producestagesmodels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PlantSpec.produceStagesModels)
}
#if LANG_CXX11
inline void PlantSpec::add_producestagesmodels(::std::string&& value) {
  producestagesmodels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PlantSpec.produceStagesModels)
}
#endif
inline void PlantSpec::add_producestagesmodels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  producestagesmodels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PlantSpec.produceStagesModels)
}
inline void PlantSpec::add_producestagesmodels(const char* value, size_t size) {
  producestagesmodels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PlantSpec.produceStagesModels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlantSpec::producestagesmodels() const {
  // @@protoc_insertion_point(field_list:PlantSpec.produceStagesModels)
  return producestagesmodels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlantSpec::mutable_producestagesmodels() {
  // @@protoc_insertion_point(field_mutable_list:PlantSpec.produceStagesModels)
  return &producestagesmodels_;
}

// repeated int32 products = 13;
inline int PlantSpec::products_size() const {
  return products_.size();
}
inline void PlantSpec::clear_products() {
  products_.Clear();
}
inline ::google::protobuf::int32 PlantSpec::products(int index) const {
  // @@protoc_insertion_point(field_get:PlantSpec.products)
  return products_.Get(index);
}
inline void PlantSpec::set_products(int index, ::google::protobuf::int32 value) {
  products_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlantSpec.products)
}
inline void PlantSpec::add_products(::google::protobuf::int32 value) {
  products_.Add(value);
  // @@protoc_insertion_point(field_add:PlantSpec.products)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlantSpec::products() const {
  // @@protoc_insertion_point(field_list:PlantSpec.products)
  return products_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlantSpec::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:PlantSpec.products)
  return &products_;
}

// int32 productId = 14;
inline void PlantSpec::clear_productid() {
  productid_ = 0;
}
inline ::google::protobuf::int32 PlantSpec::productid() const {
  // @@protoc_insertion_point(field_get:PlantSpec.productId)
  return productid_;
}
inline void PlantSpec::set_productid(::google::protobuf::int32 value) {
  
  productid_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.productId)
}

// int32 produceLoops = 15;
inline void PlantSpec::clear_produceloops() {
  produceloops_ = 0;
}
inline ::google::protobuf::int32 PlantSpec::produceloops() const {
  // @@protoc_insertion_point(field_get:PlantSpec.produceLoops)
  return produceloops_;
}
inline void PlantSpec::set_produceloops(::google::protobuf::int32 value) {
  
  produceloops_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.produceLoops)
}

// bool needRebuild = 16;
inline void PlantSpec::clear_needrebuild() {
  needrebuild_ = false;
}
inline bool PlantSpec::needrebuild() const {
  // @@protoc_insertion_point(field_get:PlantSpec.needRebuild)
  return needrebuild_;
}
inline void PlantSpec::set_needrebuild(bool value) {
  
  needrebuild_ = value;
  // @@protoc_insertion_point(field_set:PlantSpec.needRebuild)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlantSpecTable

// map<int64, .PlantSpec> Data = 1;
inline int PlantSpecTable::data_size() const {
  return data_.size();
}
inline void PlantSpecTable::clear_data() {
  data_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >&
PlantSpecTable::data() const {
  // @@protoc_insertion_point(field_map:PlantSpecTable.Data)
  return data_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >*
PlantSpecTable::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:PlantSpecTable.Data)
  return data_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlantSpec_2eproto__INCLUDED
