// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlantSpec.proto

#include "PlantSpec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class PlantSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlantSpec>
      _instance;
} _PlantSpec_default_instance_;
class PlantSpecTable_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlantSpecTable_DataEntry_DoNotUse>
      _instance;
} _PlantSpecTable_DataEntry_DoNotUse_default_instance_;
class PlantSpecTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlantSpecTable>
      _instance;
} _PlantSpecTable_default_instance_;
namespace protobuf_PlantSpec_2eproto {
void InitDefaultsPlantSpecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PlantSpec_default_instance_;
    new (ptr) ::PlantSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlantSpec::InitAsDefaultInstance();
}

void InitDefaultsPlantSpec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlantSpecImpl);
}

void InitDefaultsPlantSpecTable_DataEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_PlantSpec_2eproto::InitDefaultsPlantSpec();
  {
    void* ptr = &::_PlantSpecTable_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::PlantSpecTable_DataEntry_DoNotUse();
  }
  ::PlantSpecTable_DataEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsPlantSpecTable_DataEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlantSpecTable_DataEntry_DoNotUseImpl);
}

void InitDefaultsPlantSpecTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_PlantSpec_2eproto::InitDefaultsPlantSpecTable_DataEntry_DoNotUse();
  {
    void* ptr = &::_PlantSpecTable_default_instance_;
    new (ptr) ::PlantSpecTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlantSpecTable::InitAsDefaultInstance();
}

void InitDefaultsPlantSpecTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlantSpecTableImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, cellcountx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, cellcounty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, butprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, sellprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, buildstages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, buildstagesmodels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, producestages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, producestagesmodels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, products_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, produceloops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpec, needrebuild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpecTable_DataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpecTable_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpecTable_DataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpecTable_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpecTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlantSpecTable, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PlantSpec)},
  { 21, 28, sizeof(::PlantSpecTable_DataEntry_DoNotUse)},
  { 30, -1, sizeof(::PlantSpecTable)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlantSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlantSpecTable_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlantSpecTable_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "PlantSpec.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017PlantSpec.proto\"\303\002\n\tPlantSpec\022\n\n\002id\030\001 "
      "\001(\003\022\014\n\004name\030\002 \001(\t\022\022\n\ncellCountX\030\003 \001(\005\022\022\n"
      "\ncellCountY\030\004 \001(\005\022\r\n\005model\030\005 \001(\t\022\014\n\004icon"
      "\030\006 \001(\t\022\020\n\010butPrice\030\007 \001(\005\022\021\n\tsellPrice\030\010 "
      "\001(\005\022\023\n\013buildStages\030\t \003(\005\022\031\n\021buildStagesM"
      "odels\030\n \003(\t\022\025\n\rproduceStages\030\013 \003(\005\022\033\n\023pr"
      "oduceStagesModels\030\014 \003(\t\022\020\n\010products\030\r \003("
      "\005\022\021\n\tproductId\030\016 \001(\005\022\024\n\014produceLoops\030\017 \001"
      "(\005\022\023\n\013needRebuild\030\020 \001(\010\"r\n\016PlantSpecTabl"
      "e\022\'\n\004Data\030\001 \003(\0132\031.PlantSpecTable.DataEnt"
      "ry\0327\n\tDataEntry\022\013\n\003key\030\001 \001(\003\022\031\n\005value\030\002 "
      "\001(\0132\n.PlantSpec:\0028\001B\014\252\002\tTableToolb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlantSpec.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PlantSpec_2eproto

// ===================================================================

void PlantSpec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlantSpec::kIdFieldNumber;
const int PlantSpec::kNameFieldNumber;
const int PlantSpec::kCellCountXFieldNumber;
const int PlantSpec::kCellCountYFieldNumber;
const int PlantSpec::kModelFieldNumber;
const int PlantSpec::kIconFieldNumber;
const int PlantSpec::kButPriceFieldNumber;
const int PlantSpec::kSellPriceFieldNumber;
const int PlantSpec::kBuildStagesFieldNumber;
const int PlantSpec::kBuildStagesModelsFieldNumber;
const int PlantSpec::kProduceStagesFieldNumber;
const int PlantSpec::kProduceStagesModelsFieldNumber;
const int PlantSpec::kProductsFieldNumber;
const int PlantSpec::kProductIdFieldNumber;
const int PlantSpec::kProduceLoopsFieldNumber;
const int PlantSpec::kNeedRebuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlantSpec::PlantSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_PlantSpec_2eproto::InitDefaultsPlantSpec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlantSpec)
}
PlantSpec::PlantSpec(const PlantSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      buildstages_(from.buildstages_),
      buildstagesmodels_(from.buildstagesmodels_),
      producestages_(from.producestages_),
      producestagesmodels_(from.producestagesmodels_),
      products_(from.products_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.icon().size() > 0) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&needrebuild_) -
    reinterpret_cast<char*>(&id_)) + sizeof(needrebuild_));
  // @@protoc_insertion_point(copy_constructor:PlantSpec)
}

void PlantSpec::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needrebuild_) -
      reinterpret_cast<char*>(&id_)) + sizeof(needrebuild_));
  _cached_size_ = 0;
}

PlantSpec::~PlantSpec() {
  // @@protoc_insertion_point(destructor:PlantSpec)
  SharedDtor();
}

void PlantSpec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlantSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlantSpec::descriptor() {
  ::protobuf_PlantSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlantSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlantSpec& PlantSpec::default_instance() {
  ::protobuf_PlantSpec_2eproto::InitDefaultsPlantSpec();
  return *internal_default_instance();
}

PlantSpec* PlantSpec::New(::google::protobuf::Arena* arena) const {
  PlantSpec* n = new PlantSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlantSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:PlantSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildstages_.Clear();
  buildstagesmodels_.Clear();
  producestages_.Clear();
  producestagesmodels_.Clear();
  products_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needrebuild_) -
      reinterpret_cast<char*>(&id_)) + sizeof(needrebuild_));
  _internal_metadata_.Clear();
}

bool PlantSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlantSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlantSpec.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cellCountX = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellcountx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cellCountY = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellcounty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlantSpec.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string icon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlantSpec.icon"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 butPrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &butprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sellPrice = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 buildStages = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buildstages())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_buildstages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string buildStagesModels = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_buildstagesmodels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buildstagesmodels(this->buildstagesmodels_size() - 1).data(),
            static_cast<int>(this->buildstagesmodels(this->buildstagesmodels_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlantSpec.buildStagesModels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 produceStages = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_producestages())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_producestages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string produceStagesModels = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_producestagesmodels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producestagesmodels(this->producestagesmodels_size() - 1).data(),
            static_cast<int>(this->producestagesmodels(this->producestagesmodels_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlantSpec.produceStagesModels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 products = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_products())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_products())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 productId = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 produceLoops = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &produceloops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool needRebuild = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrebuild_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlantSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlantSpec)
  return false;
#undef DO_
}

void PlantSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlantSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 cellCountX = 3;
  if (this->cellcountx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellcountx(), output);
  }

  // int32 cellCountY = 4;
  if (this->cellcounty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cellcounty(), output);
  }

  // string model = 5;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->model(), output);
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->icon(), output);
  }

  // int32 butPrice = 7;
  if (this->butprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->butprice(), output);
  }

  // int32 sellPrice = 8;
  if (this->sellprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sellprice(), output);
  }

  // repeated int32 buildStages = 9;
  if (this->buildstages_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _buildstages_cached_byte_size_));
  }
  for (int i = 0, n = this->buildstages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->buildstages(i), output);
  }

  // repeated string buildStagesModels = 10;
  for (int i = 0, n = this->buildstagesmodels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buildstagesmodels(i).data(), static_cast<int>(this->buildstagesmodels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.buildStagesModels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->buildstagesmodels(i), output);
  }

  // repeated int32 produceStages = 11;
  if (this->producestages_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _producestages_cached_byte_size_));
  }
  for (int i = 0, n = this->producestages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->producestages(i), output);
  }

  // repeated string produceStagesModels = 12;
  for (int i = 0, n = this->producestagesmodels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producestagesmodels(i).data(), static_cast<int>(this->producestagesmodels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.produceStagesModels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->producestagesmodels(i), output);
  }

  // repeated int32 products = 13;
  if (this->products_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _products_cached_byte_size_));
  }
  for (int i = 0, n = this->products_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->products(i), output);
  }

  // int32 productId = 14;
  if (this->productid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->productid(), output);
  }

  // int32 produceLoops = 15;
  if (this->produceloops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->produceloops(), output);
  }

  // bool needRebuild = 16;
  if (this->needrebuild() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->needrebuild(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PlantSpec)
}

::google::protobuf::uint8* PlantSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlantSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 cellCountX = 3;
  if (this->cellcountx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellcountx(), target);
  }

  // int32 cellCountY = 4;
  if (this->cellcounty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cellcounty(), target);
  }

  // string model = 5;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model(), target);
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon(), target);
  }

  // int32 butPrice = 7;
  if (this->butprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->butprice(), target);
  }

  // int32 sellPrice = 8;
  if (this->sellprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sellprice(), target);
  }

  // repeated int32 buildStages = 9;
  if (this->buildstages_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _buildstages_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->buildstages_, target);
  }

  // repeated string buildStagesModels = 10;
  for (int i = 0, n = this->buildstagesmodels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buildstagesmodels(i).data(), static_cast<int>(this->buildstagesmodels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.buildStagesModels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->buildstagesmodels(i), target);
  }

  // repeated int32 produceStages = 11;
  if (this->producestages_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _producestages_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->producestages_, target);
  }

  // repeated string produceStagesModels = 12;
  for (int i = 0, n = this->producestagesmodels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producestagesmodels(i).data(), static_cast<int>(this->producestagesmodels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlantSpec.produceStagesModels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->producestagesmodels(i), target);
  }

  // repeated int32 products = 13;
  if (this->products_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _products_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->products_, target);
  }

  // int32 productId = 14;
  if (this->productid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->productid(), target);
  }

  // int32 produceLoops = 15;
  if (this->produceloops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->produceloops(), target);
  }

  // bool needRebuild = 16;
  if (this->needrebuild() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->needrebuild(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlantSpec)
  return target;
}

size_t PlantSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlantSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 buildStages = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->buildstages_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _buildstages_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string buildStagesModels = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->buildstagesmodels_size());
  for (int i = 0, n = this->buildstagesmodels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->buildstagesmodels(i));
  }

  // repeated int32 produceStages = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->producestages_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _producestages_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string produceStagesModels = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->producestagesmodels_size());
  for (int i = 0, n = this->producestagesmodels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->producestagesmodels(i));
  }

  // repeated int32 products = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->products_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _products_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string model = 5;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->icon());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int32 cellCountX = 3;
  if (this->cellcountx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cellcountx());
  }

  // int32 cellCountY = 4;
  if (this->cellcounty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cellcounty());
  }

  // int32 butPrice = 7;
  if (this->butprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->butprice());
  }

  // int32 sellPrice = 8;
  if (this->sellprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sellprice());
  }

  // int32 productId = 14;
  if (this->productid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->productid());
  }

  // int32 produceLoops = 15;
  if (this->produceloops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->produceloops());
  }

  // bool needRebuild = 16;
  if (this->needrebuild() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlantSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlantSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const PlantSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlantSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlantSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlantSpec)
    MergeFrom(*source);
  }
}

void PlantSpec::MergeFrom(const PlantSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlantSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildstages_.MergeFrom(from.buildstages_);
  buildstagesmodels_.MergeFrom(from.buildstagesmodels_);
  producestages_.MergeFrom(from.producestages_);
  producestagesmodels_.MergeFrom(from.producestagesmodels_);
  products_.MergeFrom(from.products_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cellcountx() != 0) {
    set_cellcountx(from.cellcountx());
  }
  if (from.cellcounty() != 0) {
    set_cellcounty(from.cellcounty());
  }
  if (from.butprice() != 0) {
    set_butprice(from.butprice());
  }
  if (from.sellprice() != 0) {
    set_sellprice(from.sellprice());
  }
  if (from.productid() != 0) {
    set_productid(from.productid());
  }
  if (from.produceloops() != 0) {
    set_produceloops(from.produceloops());
  }
  if (from.needrebuild() != 0) {
    set_needrebuild(from.needrebuild());
  }
}

void PlantSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlantSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlantSpec::CopyFrom(const PlantSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlantSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantSpec::IsInitialized() const {
  return true;
}

void PlantSpec::Swap(PlantSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlantSpec::InternalSwap(PlantSpec* other) {
  using std::swap;
  buildstages_.InternalSwap(&other->buildstages_);
  buildstagesmodels_.InternalSwap(&other->buildstagesmodels_);
  producestages_.InternalSwap(&other->producestages_);
  producestagesmodels_.InternalSwap(&other->producestagesmodels_);
  products_.InternalSwap(&other->products_);
  name_.Swap(&other->name_);
  model_.Swap(&other->model_);
  icon_.Swap(&other->icon_);
  swap(id_, other->id_);
  swap(cellcountx_, other->cellcountx_);
  swap(cellcounty_, other->cellcounty_);
  swap(butprice_, other->butprice_);
  swap(sellprice_, other->sellprice_);
  swap(productid_, other->productid_);
  swap(produceloops_, other->produceloops_);
  swap(needrebuild_, other->needrebuild_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlantSpec::GetMetadata() const {
  protobuf_PlantSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlantSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

PlantSpecTable_DataEntry_DoNotUse::PlantSpecTable_DataEntry_DoNotUse() {}
PlantSpecTable_DataEntry_DoNotUse::PlantSpecTable_DataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PlantSpecTable_DataEntry_DoNotUse::MergeFrom(const PlantSpecTable_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PlantSpecTable_DataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_PlantSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlantSpec_2eproto::file_level_metadata[1];
}
void PlantSpecTable_DataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PlantSpecTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlantSpecTable::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlantSpecTable::PlantSpecTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_PlantSpec_2eproto::InitDefaultsPlantSpecTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlantSpecTable)
}
PlantSpecTable::PlantSpecTable(const PlantSpecTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:PlantSpecTable)
}

void PlantSpecTable::SharedCtor() {
  _cached_size_ = 0;
}

PlantSpecTable::~PlantSpecTable() {
  // @@protoc_insertion_point(destructor:PlantSpecTable)
  SharedDtor();
}

void PlantSpecTable::SharedDtor() {
}

void PlantSpecTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlantSpecTable::descriptor() {
  ::protobuf_PlantSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlantSpec_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlantSpecTable& PlantSpecTable::default_instance() {
  ::protobuf_PlantSpec_2eproto::InitDefaultsPlantSpecTable();
  return *internal_default_instance();
}

PlantSpecTable* PlantSpecTable::New(::google::protobuf::Arena* arena) const {
  PlantSpecTable* n = new PlantSpecTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlantSpecTable::Clear() {
// @@protoc_insertion_point(message_clear_start:PlantSpecTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

bool PlantSpecTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlantSpecTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .PlantSpec> Data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          PlantSpecTable_DataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PlantSpecTable_DataEntry_DoNotUse,
              ::google::protobuf::int64, ::PlantSpec,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec > > parser(&data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlantSpecTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlantSpecTable)
  return false;
#undef DO_
}

void PlantSpecTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlantSpecTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .PlantSpec> Data = 1;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PlantSpecTable_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PlantSpecTable_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PlantSpecTable)
}

::google::protobuf::uint8* PlantSpecTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlantSpecTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .PlantSpec> Data = 1;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PlantSpecTable_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PlantSpecTable_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlantSpecTable)
  return target;
}

size_t PlantSpecTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlantSpecTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int64, .PlantSpec> Data = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  {
    ::google::protobuf::scoped_ptr<PlantSpecTable_DataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::PlantSpec >::const_iterator
        it = this->data().begin();
        it != this->data().end(); ++it) {
      entry.reset(data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlantSpecTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlantSpecTable)
  GOOGLE_DCHECK_NE(&from, this);
  const PlantSpecTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlantSpecTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlantSpecTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlantSpecTable)
    MergeFrom(*source);
  }
}

void PlantSpecTable::MergeFrom(const PlantSpecTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlantSpecTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void PlantSpecTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlantSpecTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlantSpecTable::CopyFrom(const PlantSpecTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlantSpecTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantSpecTable::IsInitialized() const {
  return true;
}

void PlantSpecTable::Swap(PlantSpecTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlantSpecTable::InternalSwap(PlantSpecTable* other) {
  using std::swap;
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlantSpecTable::GetMetadata() const {
  protobuf_PlantSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PlantSpec_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
